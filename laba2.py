# -*- coding: utf-8 -*-
"""new_laba2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NRXd8N6HzlzyRTwOHln_IWtUkfN3o6R0
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd

import glob
image_list = glob.glob('/content/gdrive/My Drive/VisDrone2019-DET-val/VisDrone2019-DET-val/images/*.jpg')

txt_list = glob.glob('/content/gdrive/My Drive/VisDrone2019-DET-val/VisDrone2019-DET-val/annotations/*.txt')

import torch 
precision = 'fp32'
ssd_model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_ssd', model_math=precision)
utils = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_ssd_processing_utils')
ssd_model.to('cuda')
ssd_model.eval()

uris = image_list
inputs = [utils.prepare_input(uri) for uri in uris]
tensor = utils.prepare_tensor(inputs, precision == 'fp16')

with torch.no_grad():
    detections_batch = ssd_model(tensor)

results_per_input = utils.decode_results(detections_batch)
best_results_per_input = [utils.pick_best(results, 0.00) for results in results_per_input]
classes_to_labels = utils.get_coco_object_dictionary()

import pandas as pd
import numpy as np

def annots(txt):
  data = []
  data1 = []
  DATA = pd.DataFrame()
  for f in txt:
    data.append(np.genfromtxt(f, delimiter=',', dtype=np.float))
    data1.append(f[f.rindex('/')+1:])
  for i in range(len(data1)):
    df = pd.DataFrame(np.matrix(data[i]),columns=['bbox_left','bbox_top','bbox_width','bbox_height','score','object_category','truncation','occlusion'])
    df2 = pd.Series(np.full(len(np.matrix(data[i])),data1[i]))  
    df['name_file'] = df2
    DATA = DATA.append(df, ignore_index = True)
  return DATA

df_annots = annots(txt_list)

df_annots

def func_annots(txt, best_results):
  data = []
  data1 = []
  DATA = pd.DataFrame()
  for f in txt:
    data1.append(f[f.rindex('/')+1:])
  for i in range(len(data1)):
    for j in range(len(best_results[i][0])):
      left = best_results[i][0][j][0]
      bot = best_results[i][0][j][1]
      right = best_results[i][0][j][2]
      top = best_results[i][0][j][3]
      best_results[i][0][j][0] = 300 * left
      best_results[i][0][j][1] = 300 * bot
      best_results[i][0][j][2] = 300 * (right - left)
      best_results[i][0][j][3] = 300 * (top - bot)
    df1 = pd.DataFrame(best_results[i][0], columns=['bbox_left','bbox_top','bbox_width','bbox_height'])
    df2 = pd.Series(np.full(len(np.matrix(best_results[i][0])),data1[i]))
    df1['classes'] = pd.Series(best_results[i][1])
    df1['confidences'] = pd.Series(best_results[i][2])
    df1['name_file'] = df2 
    DATA = DATA.append(df1, ignore_index = True)
  return DATA

df_func_annots = func_annots(txt_list, best_results_per_input)

df_func_annots

from PIL import Image 
import pandas as pd
import numpy as np

df_size = pd.DataFrame(columns=['width','height'])
for i in range(len(image_list)):
  im = Image.open(image_list[i])
  width, height = im.size
  df_size = df_size.append({'width': width, 'height': height, 'coeff': 300/height}, ignore_index=True)

data1 = []
for f in txt_list:
  data1.append(f[f.rindex('/')+1:])

df_size['name_file'] = data1

df_annots_new = pd.DataFrame()

df_annots_new = df_annots.copy()

df_annots_new = df_annots_new.merge(df_size,how='left',left_on = 'name_file',right_on = 'name_file')

df_annots_new.head()

df_annots_new['bbox_left_x'] = df_annots_new.bbox_left * df_annots_new.coeff
df_annots_new['bbox_top'] = df_annots_new.bbox_top * df_annots_new.coeff
df_annots_new['bbox_width'] = df_annots_new.bbox_width * df_annots_new.coeff
df_annots_new['bbox_height'] = df_annots_new.bbox_height * df_annots_new.coeff
df_annots_new['width'] = df_annots_new.width * df_annots_new.coeff
df_annots_new['height'] = df_annots_new.height * df_annots_new.coeff

df_annots_new['bbox_center'] = df_annots_new.width/2
df_annots_new['bbox_left'] = df_annots_new.bbox_center - 150
df_annots_new['bbox_right'] = df_annots_new.bbox_center + 150
df_annots_new['bbox_right_x'] = df_annots_new.bbox_left_x + df_annots_new.bbox_width

df_annots_new_1 = df_annots_new.copy()

df_annots_new_1

df_annots_new_2 = pd.DataFrame()

df_annots_new_2 = df_annots_new_1.loc[(df_annots_new_1.bbox_left_x >= df_annots_new_1.bbox_left) & (df_annots_new_1.bbox_left_x < df_annots_new_1.bbox_right) & (df_annots_new_1.bbox_right_x > df_annots_new_1.bbox_left) & (df_annots_new_1.bbox_right_x <= df_annots_new_1.bbox_right)]

df_annots_new_2 = pd.DataFrame()
for i in range(len(df_annots_new_1)):
  if ((df_annots_new_1.iloc[i,12]>=df_annots_new_1.iloc[i,0])&(df_annots_new_1.iloc[i,12]<df_annots_new_1.iloc[i,14])&(df_annots_new_1.iloc[i,15]>df_annots_new_1.iloc[i,0])&(df_annots_new_1.iloc[i,15]<=df_annots_new_1.iloc[i,14])):
    df_annots_new_2 = df_annots_new_2.append(df_annots_new_1.iloc[i])

df_annots_new_3 = df_annots_new_2.copy()

df_annots_new_3

df_annots_new_3.bbox_right_x = df_annots_new_3.bbox_right_x - df_annots_new_3.bbox_left
df_annots_new_3.bbox_center = df_annots_new_3.bbox_center - df_annots_new_3.bbox_left
df_annots_new_3.bbox_right = df_annots_new_3.bbox_right - df_annots_new_3.bbox_left
df_annots_new_3.bbox_left_x = df_annots_new_3.bbox_left_x - df_annots_new_3.bbox_left

df_annots_new_3.bbox_left = df_annots_new_3.bbox_left - df_annots_new_3.bbox_left

df_annots_new_3

df_annots_new_4 = df_annots_new_3.copy()

df_func_annots_copy = df_func_annots.copy()

df_annots_new_4.head()

df_annots_new_5 = pd.DataFrame()
df_annots_new_5 = df_annots_new_4[['bbox_left_x','bbox_top','bbox_width','bbox_height','name_file','object_category']]
df_annots_new_5.head()

df_func_annots_copy_1 = pd.DataFrame()
df_func_annots_copy_1 = df_func_annots_copy[['bbox_left','bbox_top','bbox_width','bbox_height','name_file','classes']]
df_func_annots_copy_1.head()

for i in range(len(df_annots_new_5)):
  if (df_annots_new_5.object_category.iloc[i] in np.array([5,7,8,10])):
    df_annots_new_5.object_category.iloc[i] = 'other_vehicle'
  if (df_annots_new_5.object_category.iloc[i] in np.array([1,2])):
    df_annots_new_5.object_category.iloc[i] = 'people'
  if(df_annots_new_5.object_category.iloc[i]== 3):
    df_annots_new_5.object_category.iloc[i] = 'bycycle' 
  if(df_annots_new_5.object_category.iloc[i]== 6):
    df_annots_new_5.object_category.iloc[i] = 'trunck'
  if(df_annots_new_5.object_category.iloc[i]== 9):
    df_annots_new_5.object_category.iloc[i] = 'bus'
  if(df_annots_new_5.object_category.iloc[i]== 0):
    df_annots_new_5.object_category.iloc[i] = 'ignored_regions'  
  if(df_annots_new_5.object_category.iloc[i]== 4):
    df_annots_new_5.object_category.iloc[i] = 'сar'
  if(df_annots_new_5.object_category.iloc[i]== 11):
    df_annots_new_5.object_category.iloc[i] = 'other_1'

a = np.array(range(3,80))
a = np.delete(a, [2,4])
a

for i in range(len(df_func_annots_copy_1)):
  if(df_func_annots_copy_1.classes.iloc[i] in a):
    df_func_annots_copy_1.classes.iloc[i] = 'other'
  if(df_func_annots_copy_1.classes.iloc[i]== 0):
    df_func_annots_copy_1.classes.iloc[i] = 'people'
  if(df_func_annots_copy_1.classes.iloc[i]== 1):
    df_func_annots_copy_1.classes.iloc[i] = 'bycycle'
  if(df_func_annots_copy_1.classes.iloc[i]== 7):
    df_func_annots_copy_1.classes.iloc[i] = 'trunck'
  if(df_func_annots_copy_1.classes.iloc[i]== 5):
    df_func_annots_copy_1.classes.iloc[i] = 'bus'
  if(df_func_annots_copy_1.classes.iloc[i]== 2):
    df_func_annots_copy_1.classes.iloc[i] = 'сar'

def max_in_list(lst):
  assert lst
  m = lst[0]
  for i in lst:
    if i > m:
      m = i
  return m

data1 = []
for f in txt_list:
  data1.append(f[f.rindex('/')+1:])

def IoU_1(out, inp):

  box_in = inp
  box_out = out
  for_return = pd.DataFrame()
  for_return_1 = []
  for_return_2 = []

  for i in range(len(box_out)):
    x_out = box_out.iloc[i,0]
    y_out = box_out.iloc[i,1]
    indx_in = []
    peresec = []
    name_out = box_out.iloc[i,4]

    for j in range(len(box_in)):
      name_in = box_in.iloc[j,4]
      if (name_out == name_in):
        width_out = box_out.iloc[i,2]
        height_out = box_out.iloc[i,3]

        width_in = box_in.iloc[j,2]
        height_in = box_in.iloc[j,3]

        x1_in = box_in.iloc[j,0]
        x2_in = box_in.iloc[j,0] + width_in
          
        y1_in = box_in.iloc[j,1]
        y2_in = box_in.iloc[j,1] - height_in
        
        x1_out = box_out.iloc[i,0]
        x2_out = box_out.iloc[i,0] + width_out
        
        y1_out = box_out.iloc[i,1]
        y2_out = box_out.iloc[i,1] - height_out
        
        xA = max(x1_out, x1_in)
        yA = max(y2_out, y2_in)
        xB = min(x2_out, x2_in)
        yB = min(y1_out, y1_in)

        w_p = xB - xA
        h_p = yB - yA

        if(w_p > 0):
          if(h_p > 0):
            interArea = w_p * h_p
          else:
            interArea = 0
        else:
          interArea = 0

        boxAArea = width_out * height_out
        boxBArea = height_in * width_in
        
        iou = interArea / float(boxAArea + boxBArea - interArea)
        indx_in.append(j)
        peresec.append(iou)

    if(peresec): 
      m_iou = max_in_list(peresec)
      for q in range(len(peresec)):
        if(peresec[q] == m_iou):
          index = indx_in[q]
          m_cl = box_in.iloc[index,5]
    else:
      peresec.append(0)
      m_iou = 0
      m_cl = 'nothing'
    
    
    for_return_1.append(m_iou)
    for_return_2.append(m_cl)

    print(i)
    print(m_iou)
    print('----------------------')
    
  for_return['IoU'] = pd.Series(for_return_1)
  for_return['class_in'] = pd.Series(for_return_2)
  return for_return

df_func_annots_copy_2 = pd.DataFrame()
df_annots_new_5_copy = pd.DataFrame()

df_func_annots_copy_2 = df_func_annots_copy_1.head(200)

df_annots_new_5_copy = df_annots_new_5.head(1000)

import math
import matplotlib.patches as patches
import matplotlib.pyplot as plt

IOU_CL = IoU_1(df_func_annots_copy_1,df_annots_new_5)

IOU_CL.to_csv('/content/gdrive/My Drive/IOU_CL.csv', index = False, header=True)

IOU_CL

df_func_annots_copy_1 = pd.DataFrame()
df_func_annots_copy_1 = df_func_annots_copy
df_func_annots_copy_1.head()

for i in range(len(df_func_annots_copy_1)):
  if(df_func_annots_copy_1.classes.iloc[i] in a):
    df_func_annots_copy_1.classes.iloc[i] = 'other'
  if(df_func_annots_copy_1.classes.iloc[i]== 0):
    df_func_annots_copy_1.classes.iloc[i] = 'people'
  if(df_func_annots_copy_1.classes.iloc[i]== 1):
    df_func_annots_copy_1.classes.iloc[i] = 'bycycle'
  if(df_func_annots_copy_1.classes.iloc[i]== 7):
    df_func_annots_copy_1.classes.iloc[i] = 'trunck'
  if(df_func_annots_copy_1.classes.iloc[i]== 5):
    df_func_annots_copy_1.classes.iloc[i] = 'bus'
  if(df_func_annots_copy_1.classes.iloc[i]== 2):
    df_func_annots_copy_1.classes.iloc[i] = 'сar'

Final_df = df_func_annots_copy_1

Final_df['IoU'] = IOU_CL['IoU']

Final_df['class_in'] = IOU_CL['class_in']

Final_df.to_csv('/content/gdrive/My Drive/Final_df.csv', index = False, header=True)

Final_df

Final_df_new = Final_df.copy()

Final_df_new

Final_df_new['err_class'] = 0

for i in range(len(Final_df_new)):
  if(Final_df_new.classes.iloc[i] != Final_df_new.class_in.iloc[i]):
    Final_df_new.err_class.iloc[i] = 0
  else:
    Final_df_new.err_class.iloc[i] = 1

Final_df_new_1 = Final_df_new

Final_df_new_1.head()

df_annots_new_3.head()

task_4_df = Final_df_new_1[Final_df_new_1['IoU']>= 0.35]

acc_35 = sum(task_4_df.err_class==1)/len(task_4_df)

fail_35 = len(task_4_df) - sum(task_4_df.err_class==1)

T4 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_4_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_4_df.name_file.iloc[j]):
      T4 = T4.append(df_annots_new_3.iloc[i])

loss_35 = len(T4) - sum(task_4_df.err_class==1)

task_4_df_1 = Final_df_new_1[Final_df_new_1['IoU']>= 0.30]
acc_30 = sum(task_4_df_1.err_class==1)/len(task_4_df_1)
fail_30 = len(task_4_df_1) - sum(task_4_df_1.err_class==1)

T4_1 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_4_df_1)):
    if(df_annots_new_3.name_file.iloc[i]==task_4_df_1.name_file.iloc[j]):
      T4_1 = T4_1.append(df_annots_new_3.iloc[i])

loss_30 = len(T4_1) - sum(task_4_df_1.err_class==1)

task_4_df_2 = Final_df_new_1[Final_df_new_1['IoU']>= 0.40]
acc_40 = sum(task_4_df_2.err_class==1)/len(task_4_df_2)
fail_40 = len(task_4_df_2) - sum(task_4_df_2.err_class==1)

T4_2 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_4_df_2)):
    if(df_annots_new_3.name_file.iloc[i]==task_4_df_2.name_file.iloc[j]):
      T4_2 = T4_2.append(df_annots_new_3.iloc[i])

loss_40 = len(T4_2) - sum(task_4_df_2.err_class==1)

TASK4 = pd.DataFrame(columns=['IoU','acc','loss','fail'])
TASK4 = TASK4.append({'IoU': 0.30, 'acc':acc_30*100, 'loss': loss_30, 'fail': fail_30}, ignore_index=True)
TASK4 = TASK4.append({'IoU': 0.35, 'acc':acc_35*100, 'loss': loss_35, 'fail': fail_35}, ignore_index=True)
TASK4 = TASK4.append({'IoU': 0.40, 'acc':acc_40*100, 'loss': loss_40, 'fail': fail_40}, ignore_index=True)

TASK4

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.35)&(Final_df_new_1['class_in']=='people')]

acc_35_people = sum(task_5_df.err_class==1)/len(task_5_df)

fail_35_people = len(task_5_df) - sum(task_5_df.err_class==1)

T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])

loss_35_people = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()

task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.35)&(Final_df_new_1['class_in']=='bycycle')]

acc_35_bycycle = sum(task_5_df.err_class==1)/len(task_5_df)
fail_35_bycycle = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_35_bycycle = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.35)&(Final_df_new_1['class_in']=='car')]

acc_30_car = 0
fail_30_car = 0
loss_30_car = 0
acc_35_car = 0
fail_35_car = 0
loss_35_car = 0
acc_40_car = 0
fail_40_car = 0
loss_40_car = 0

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.35)&(Final_df_new_1['class_in']=='trunc')]

acc_30_trunc = 0
fail_30_trunc = 0
loss_30_trunc = 0
acc_35_trunc = 0
fail_35_trunc = 0
loss_35_trunc = 0
acc_40_trunc = 0
fail_40_trunc = 0
loss_40_trunc = 0

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.35)&(Final_df_new_1['class_in']=='bus')]

acc_35_bus = sum(task_5_df.err_class==1)/len(task_5_df)
fail_35_bus = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_35_bus = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.30)&(Final_df_new_1['class_in']=='people')]

acc_30_people = sum(task_5_df.err_class==1)/len(task_5_df)
fail_30_people = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_30_people = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.40)&(Final_df_new_1['class_in']=='people')]

acc_40_people = sum(task_5_df.err_class==1)/len(task_5_df)
fail_40_people = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_40_people = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.30)&(Final_df_new_1['class_in']=='bycycle')]

acc_30_bycycle = sum(task_5_df.err_class==1)/len(task_5_df)
fail_30_bycycle = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_30_bycycle = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.40)&(Final_df_new_1['class_in']=='bycycle')]

acc_40_bycycle = sum(task_5_df.err_class==1)/len(task_5_df)
fail_40_bycycle = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_40_bycycle = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.30)&(Final_df_new_1['class_in']=='bus')]

acc_30_bus = sum(task_5_df.err_class==1)/len(task_5_df)
fail_30_bus = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_30_bus = len(T5) - sum(task_5_df.err_class==1)

task_5_df = pd.DataFrame()
task_5_df = Final_df_new_1[(Final_df_new_1['IoU']>= 0.40)&(Final_df_new_1['class_in']=='bus')]

acc_40_bus = sum(task_5_df.err_class==1)/len(task_5_df)
fail_40_bus = len(task_5_df) - sum(task_5_df.err_class==1)
T5 = pd.DataFrame()
for i in range(len(df_annots_new_3)):
  for j in range(len(task_5_df)):
    if(df_annots_new_3.name_file.iloc[i]==task_5_df.name_file.iloc[j]):
      T5 = T5.append(df_annots_new_3.iloc[i])
loss_40_bus = len(T5) - sum(task_5_df.err_class==1)

TASK5 = pd.DataFrame(columns=['class','IoU','acc','loss','fail'])
TASK5 = TASK5.append({'class':'people','IoU': 0.30, 'acc':acc_30_people*100, 'loss': loss_30_people, 'fail': fail_30_people}, ignore_index=True)
TASK5 = TASK5.append({'class':'people','IoU': 0.35, 'acc':acc_35_people*100, 'loss': loss_35_people, 'fail': fail_35_people}, ignore_index=True)
TASK5 = TASK5.append({'class':'people','IoU': 0.40, 'acc':acc_40_people*100, 'loss': loss_40_people, 'fail': fail_40_people}, ignore_index=True)
TASK5 = TASK5.append({'class':'bicycle','IoU': 0.30, 'acc':acc_30_bycycle*100, 'loss': loss_30_bycycle, 'fail': fail_30_bycycle}, ignore_index=True)
TASK5 = TASK5.append({'class':'bicycle','IoU': 0.35, 'acc':acc_35_bycycle*100, 'loss': loss_35_bycycle, 'fail': fail_35_bycycle}, ignore_index=True)
TASK5 = TASK5.append({'class':'bicycle','IoU': 0.40, 'acc':acc_40_bycycle*100, 'loss': loss_40_bycycle, 'fail': fail_40_bycycle}, ignore_index=True)
TASK5 = TASK5.append({'class':'car','IoU': 0.30, 'acc':acc_30_car*100, 'loss': loss_30_car, 'fail': fail_30_car}, ignore_index=True)
TASK5 = TASK5.append({'class':'car','IoU': 0.35, 'acc':acc_35_car*100, 'loss': loss_35_car, 'fail': fail_35_car}, ignore_index=True)
TASK5 = TASK5.append({'class':'car','IoU': 0.40, 'acc':acc_40_car*100, 'loss': loss_40_car, 'fail': fail_40_car}, ignore_index=True)
TASK5 = TASK5.append({'class':'bus','IoU': 0.30, 'acc':acc_30_bus*100, 'loss': loss_30_bus, 'fail': fail_30_bus}, ignore_index=True)
TASK5 = TASK5.append({'class':'bus','IoU': 0.35, 'acc':acc_35_bus*100, 'loss': loss_35_bus, 'fail': fail_35_bus}, ignore_index=True)
TASK5 = TASK5.append({'class':'bus','IoU': 0.40, 'acc':acc_40_bus*100, 'loss': loss_40_bus, 'fail': fail_40_bus}, ignore_index=True)
TASK5 = TASK5.append({'class':'trunc','IoU': 0.30, 'acc':acc_30_trunc*100, 'loss': loss_30_trunc, 'fail': fail_30_trunc}, ignore_index=True)
TASK5 = TASK5.append({'class':'trunc','IoU': 0.35, 'acc':acc_35_trunc*100, 'loss': loss_35_trunc, 'fail': fail_35_trunc}, ignore_index=True)
TASK5 = TASK5.append({'class':'trunc','IoU': 0.40, 'acc':acc_40_trunc*100, 'loss': loss_40_trunc, 'fail': fail_40_trunc}, ignore_index=True)

TASK5

for image_idx in np.arange(130,135,1):
    fig, ax = plt.subplots(1)
    image = inputs[image_idx] / 2 + 0.5
    ax.imshow(image)
    bboxes, classes, confidences = best_results_per_input[image_idx]
    for idx in range(len(bboxes)):
        x = bboxes[idx][0]
        y = bboxes[idx][1]
        w = bboxes[idx][2]
        h = bboxes[idx][3]
        rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
    box = pd.DataFrame()
    name = data1[image_idx]
    print(name)
    box = df_annots_new_5.loc[df_annots_new_5.name_file == name]
    for idx in range(len(box)):
        x1 = box.bbox_left.iloc[idx]
        x2 = box.bbox_top.iloc[idx]
        x3 = box.bbox_width.iloc[idx]
        x4 = box.bbox_height.iloc[idx]
        rect1 = patches.Rectangle((x1, x2), x3, x4, linewidth=1, edgecolor='blue', facecolor='none')
        ax.add_patch(rect1)
plt.show()